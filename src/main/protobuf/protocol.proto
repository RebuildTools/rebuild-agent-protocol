syntax="proto3";

package au.id.haworth.rebuild.agent;
option go_package = "github.com/RebuildTools/rebuild-agent-protocol/golang";

// System is a top level message
// that defines an over-all system
// and its sepcifications
message System {
			string			system_serial			= 1; // The system's serial number as defined in the DMI/SMBIOS
                        string                  system_uuid                     = 2; // The system's UUID as defined in the DMI/SMBIOS
                        string                  system_product_name             = 3; // The system's "Product Name" as defined in the DMI/SMBIOS
                        string                  system_vendor                   = 4; // The system's vendor as defined in the DMI/SMBIOS
			int64			system_memory_total		= 5; // The total memory available on the machine
	repeated	CpuSocket		system_sockets			= 6; // An array of CPU socket definitions
	repeated	NetworkInterface	system_network_interfaces	= 7; // An array of Network Interface definitions
        repeated        BlockDevice             system_storage                  = 8; // An array of block device definitions
}

// CpuSocket defines information
// about a single CPU in a socket
message CpuSocket {
			int32			socket_number			= 1; // Defines the socket the CPU is in
			int32			total_cores			= 2; // Defines the number cores the CPU has (The physical number will be doubled if Hyper-Threading is enabled)
			string			vendor_id			= 3; // Defines the ID String of the CPU Vendor
			int32			family_id			= 4; // Defines the ID of the CPU Family
			int32			model_id			= 5; // Defines the ID of the CPU Model
			string			model_name			= 6; // Defines a string representation of the CPU Model
			double			mhz				= 7; // Defines the Mhz rating of the CPU
			int32			cahce_size			= 8; // Defines the size of the CPU cache
	repeated	string			flags				= 9; // Defines the flags enabled on the CPU
}

// NetworkInterface defines information
// about a single network interface
message NetworkInterface {
			string			name				= 1; // Defines the name of the interace as detected by the Linux Kernel (e.g. eth0)
			string			hardware_addr			= 2; // Defines the hardware/MAC address of the interace, used to identify the manufacture
}

// BlockDevice represents hard drvies,
// CD/DVD roms, etc found on a system
message BlockDevice {
                        string                  name                            = 1; // Defines the Linux name for the block device
                        int64                   size                            = 2; // Defines the size of the block device in bytes
                        string                  type                            = 3; // Defines the type of block device
                        string                  model                           = 4; // Defines the model of the block device
                        string                  serial                          = 5; // Defines the vendor assigned serial of the block device
                        string                  vendor                          = 6; // Defines the vendor of the block device
                        string                  revision                        = 7; // Defines the vendor assigned revision of the block device
}
